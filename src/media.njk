---
title: "Medien"
layout: "layouts/home.njk"
permalink: /medien/
---

<div class="stack-3xl">
  <div class="wrapper stack-xl" style="padding-block-start: var(--space-2xl);">
    <h1 class="color-brightTurquoise text-step-4 sr-only">Medien</h1>
    <ul class="board-grid board-grid--media | stack-xl-2xl">
      <li>
        <a class="image-link | text-step-2 uppercase leading-tight weight-light" href="{{ ctfl.pageMedia.linkPodcast }}" style="background-image: url('../images/podcast.jpg');">
          <span class="image-link__overlay"></span></span>
        <span aria-hidden="true" class="weight-bold">10xD</span>
        <span>Podcast</span>
      </a>
    </li>

    <li>
      <a class="image-link | text-step-2 uppercase leading-tight weight-light" href="{{ ctfl.pageMedia.linkVideocast }}" style="background-image: url('../images/videocast.jpg');">
        <span class="image-link__overlay"></span></span>
      <span aria-hidden="true" class="weight-bold">10xD</span>
      <span>Videocast</span>
    </a>
  </li>

  <li>
    <a class="image-link | text-step-2 uppercase leading-tight weight-light" href="{{ ctfl.pageMedia.linkNewsletterAbo }}" style="background-image: url('../images/newsletter.jpg');">
      <span class="image-link__overlay"></span></span>
    <span aria-hidden="true" class="weight-bold">10xD</span>
    <span>Newsletter</span>
  </a>
</li>
</ul>
</div>

<div class="section">
<div class="wrapper" style="padding-block-start: var(--space-2xl);">

<div class="media-tabs stack-l-xl">
  <ul>
    <li>
      <a class="button" href="#section1" id="fotos">Fotos</a>
    </li>
    <li>
      <a class="button" href="#section2" id="videos">Videos</a>
    </li>
  </ul>
  <section id="section1" class="media-tabs__fotos">
    <div class="grid">
      <div class="grid-sizer"></div>
      {% for photo in ctfl.pageMedia.photos %}
        <div class="grid-item">
          {% ctflPicture
                  imgObj = photo,
                  fit = "fill",
                  imgWidth = "1720",
                  alt = "",
                  widths = [430, 860],
                  sizes = "(min-width: 72.5em) 433px, 100vw",
                  classes = "person__image"
                %}
        </div>
      {% endfor %}
    </div>
  </section>

  <section id="section2 media-tabs__videos">
    <div class="grid-switcher" style="
                --gs-columns-sm: 1;
                --gs-bp-md: 35rem;
                --gs-columns-md: 2;
                --gs-bp-lg: 65rem;
                --gs-columns-lg: 3;
                --gs-gap: 2rem;
                --gs-gap-vertical: 2rem;
                ">
      {% for id in ctfl.pageMedia.videoIds %}
        {% set videoId = id %}
        {% include "partials/youtube.html" %}
      {% endfor %}
    </div>
  </section>
</div>
</div>
</div>
</div>

<script src="/js/msonry.pkgd.min.js"></script>
<script src="/js/youtube.js"></script>
<script>
(function () {
// Get relevant elements and collections
const tabbed = document.querySelector('.media-tabs');
const tablist = tabbed.querySelector('ul');
const tabs = tablist.querySelectorAll('a');
const panels = tabbed.querySelectorAll('[id^="section"]');

// The tab switching function
const switchTab = (oldTab, newTab) => {
newTab.focus();
// Make the active tab focusable by the user (Tab key)
newTab.removeAttribute('tabindex');
// Set the selected state
newTab.setAttribute('aria-selected', 'true');
oldTab.removeAttribute('aria-selected');
oldTab.setAttribute('tabindex', '-1');
// Get the indices of the new and old tabs to find the correct
// tab panels to show and hide
let index = Array
  .prototype
  .indexOf
  .call(tabs, newTab);
let oldIndex = Array
  .prototype
  .indexOf
  .call(tabs, oldTab);
panels[oldIndex].hidden = true;
panels[index].hidden = false;
}

// Add the tablist role to the first <ul> in the .tabbed container
tablist.setAttribute('role', 'tablist');

// Add semantics are remove user focusability for each tab
Array
.prototype
.forEach
.call(tabs, (tab, i) => {
  tab.setAttribute('role', 'tab');
  //tab.setAttribute('id', 'tab' + (i + 1));
  tab.setAttribute('tabindex', '-1');
  tab
    .parentNode
    .setAttribute('role', 'presentation');

  // Handle clicking of tabs for mouse users
  tab.addEventListener('click', e => {
    e.preventDefault();
    let currentTab = tablist.querySelector('[aria-selected]');
    if (e.currentTarget !== currentTab) {
      switchTab(currentTab, e.currentTarget);
    }
  });

  // Handle keydown events for keyboard users
  tab.addEventListener('keydown', e => {
    // Get the index of the current tab in the tabs node list
    let index = Array
      .prototype
      .indexOf
      .call(tabs, e.currentTarget);
    // Work out which key the user is pressing and
    // Calculate the new tab's index where appropriate
    let dir = e.which === 37
      ? index - 1
      : e.which === 39
        ? index + 1
        : e.which === 40
          ? 'down'
          : null;
    if (dir !== null) {
      e.preventDefault();
      // If the down key is pressed, move focus to the open panel,
      // otherwise switch to the adjacent tab
      dir === 'down'
        ? panels[i].focus()
        : tabs[dir]
          ? switchTab(e.currentTarget, tabs[dir])
          : void 0;
    }
  });
});

// Add tab panel semantics and hide them all
Array
.prototype
.forEach
.call(panels, (panel, i) => {
  panel.setAttribute('role', 'tabpanel');
  panel.setAttribute('tabindex', '-1');
  let id = panel.getAttribute('id');
  panel.setAttribute('aria-labelledby', tabs[i].id);
  panel.hidden = true;
});

// Initially activate the first tab and reveal the first tab panel
tabs[0].removeAttribute('tabindex');
tabs[0].setAttribute('aria-selected', 'true');
panels[0].hidden = false;

let grid = document.querySelector('.grid');
let msnry = new Masonry(grid, {
itemSelector: '.grid-item',
columnWidth: '.grid-sizer',
percentPosition: true
});

let url = location.href;
let tabFromUrl = url.split('#')[1];
let tabElement = document.querySelector(`#${tabFromUrl}`)

if (tabElement) {
let currentTab = tabs[0];
if (tabElement !== currentTab) {
  switchTab(currentTab, tabElement);
}
}
})();
</script>